apiVersion: v1
kind: Namespace
metadata:
  name: drone

----

  apiVersion: v1
  kind: Secret
  metadata:
    name: drone-secrets
    namespace: drone
  data:
    server.secret: REPLACE-THIS-WITH-BASE64-ENCODED-VALUE

----

  apiVersion: v1
  kind: Service
  metadata:
    name: drone-service
    namespace: drone
  spec:
    type: LoadBalancer
    # type: NodePort
    ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8000
    - name: grpc
      protocol: TCP
      port: 9000
      targetPort: 9000
    selector:
      app: drone-server

----

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: drone-server
  namespace: drone
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: drone-server
    spec:
      containers:
      - image: drone/drone:latest
        imagePullPolicy: Always
        name: drone-server
        ports:
        - containerPort: 8000
          protocol: TCP
        - containerPort: 9000
          protocol: TCP
        volumeMounts:
          # Persist our configs in an SQLite DB in here
          - name: drone-server-sqlite-db
            mountPath: /var/lib/drone
          # Enables Docker in Docker
          - name: docker-socket
            mountPath: /var/run/docker.sock
        resources:
          requests:
            cpu: 40m
            memory: 32Mi
        env:
        - name: DRONE_HOST
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.host
        - name: DRONE_OPEN
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.open
        - name: DRONE_DATABASE_DRIVER
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.database.driver
        - name: DRONE_DATABASE_DATASOURCE
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.database.datasource
        - name: DRONE_SECRET
          valueFrom:
            secretKeyRef:
              name: drone-secrets
              key: server.secret
        - name: DRONE_ADMIN
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.admin
        - name: DRONE_GITHUB
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.remote.github
        - name: DRONE_GITHUB_CLIENT
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.remote.github.client
        - name: DRONE_GITHUB_SECRET
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.remote.github.secret
        - name: DRONE_GITEA
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.remote.gitea
        - name: DRONE_GITEA_URL
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.remote.gitea.url
        - name: DRONE_GITEA_SKIP_VERIFY
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.remote.gitea.skip.verify
        - name: DRONE_DEBUG
          valueFrom:
            configMapKeyRef:
              name: drone-config
              key: server.debug

      volumes:
        - name: drone-server-sqlite-db
          gcePersistentDisk:
            pdName:  drone-server-sqlite-db
            fsType: ext4
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock

----

  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: drone-config
    namespace: drone
  data:
    # server host name
    server.host: drone.example.com
    # start the server in debug mode
    server.debug: "true"
    # open user registration
    server.open: "true"
    # database driver, defaul as sqlite3
    server.database.driver: sqlite3
    # database driver configuration string
    server.database.datasource: drone.sqlite
    # list of admin users
    server.admin: Oleboy

    # remote parameters (GitHub)
    server.remote.github: "true"
    server.remote.github.client: xxxxx
    server.remote.github.secret: xxxxx

    # remote parameters (Gitea)
    server.remote.gitea: "false"
    server.remote.gitea.url: "https://try.gitea.io"
    server.remote.gitea.skip.verify: "true"

    agent.debug: "true"
    agent.debug.pretty: "true"
    agent.max.procs: "1"
    agent.healthcheck: "true"
    agent.keepalive.time: "1s"
    agent.keepalive.timeout: "5s"

----
